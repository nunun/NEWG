# var   webapi = require('./services/protocols/webapi');
# using WebAPI = Services.Protocols.WebAPI;
specs:
  services:
    protocols:
      webapi:
        - name: Signup
          desc: サインアップAPI
          api_path: /signup
          request: []
          response: []

        - name: Signin
          desc: サインインAPI
          api_path: /signin
          request:
            - name: signinToken
              desc: サインイントークン
              type: string
              validate: {length: 16}
          response: []

        - name: Rename
          desc: 名前変更API
          api_path: /rename
          request:
            - name: name
              desc: 変更する名前
              type: string
          response: []

        - name: Player
          desc: プレイヤー情報の取得
          api_path: /player
          use: [userSecurity]
          request: []
          response: []

        - name: Matching
          desc: マッチングをリクエスト
          api_path: /matching
          use: [userSecurity]
          request: []
          response:
            - name: matchingToken
              desc: マッチングトークン
              type: string
            - name: matchingServerUrl
              desc: マッチングサーバURL
              type: string

        - name: Test
          desc: ユニットテスト用
          api_path: /test
          request:
            - name: reqValue
              desc: リクエストの値
              type: int
          response:
            - name: resValue
              desc: レスポンスの値
              type: int

      models:
        - name: UserData
          desc: ユーザデータ。サーバ上のみで扱われる公開されないユーザのデータ。
          properties:
            - name:  userId
              desc:  固有のユーザID
              type:  string
              value: (null)
            - name:  playerId
              desc:  固有のプレイヤID
              type:  string
              value: (null)
            - name:  sessionToken
              desc:  セッショントークン
              type:  string
              value: (null)
            - name:  signinToken
              desc:  ログイントークン
              type:  string
              value: (null)

        - name: PlayerData
          desc: プレイヤデータ。全ユーザに公開されるプレイヤのデータ。
          properties:
            - name:  playerId
              desc:  プレイヤー番号
              type:  string
              value: (null)
            - name:  playerName
              desc:  プレイヤー名
              type:  string
              value: (null)

        - name: SessionData
          desc: セッションデータ。本人にのみ知らされるセッション維持に使用するデータ。
          properties:
            - name:  sessionToken
              desc:  セッショントークン
              type:  string
              value: (null)

        - name: CredentialData
          desc: 認証データ。本人にのみ知らされるサインイン用データ。セッションが切れた時に使用。
          properties:
            - name:  signinToken
              desc:  サインイントークン
              type:  string
              value: (null)

        - name: UniqueKeyData
          desc: 固有キー生成用データ。CouchDB のキー重複制限を使って固有キーを生成するために使用。
          properties:
            - name:  associatedKey
              desc:  固有キーデータに紐づけられた関連キー
              type:  string
              value: (null)

        - name: ServerStatus
          desc: サーバステータス
          properties:
            - name:  state
              desc:  現在状態 (Standby, Ready, Started, Ended)
              type:  string
              value: (null)

        - name: ServerSetupRequest
          desc: サーバセットアップリクエスト。API サーバが Unity サーバに対してサーバインスタンスをセットアップしたいときに送信。
          properties:
            - name:  matchingId
              desc:  サーバ起動をリクエストしたマッチングID
              type:  string
              value: (null)
            - name:  sceneName
              desc:  起動するシーン名
              type:  string
              value: (null)

        - name: ServerSetupResponse
          desc: サーバセットアップレスポンス。ServerBootRequest のレスポンス。
          properties:
            - name:  matchingId
              desc:  サーバ起動をリクエストしたマッチングID
              type:  string
              value: (null)

        - name: ServerSetupDoneRequest
          desc: サーバセットアップ完了リクエスト。Unity サーバが API サーバに対してクライアント接続可能状態を通知するときに送信。
          properties:
            - name:  matchingId
              desc:  サーバ起動をリクエストしたマッチングID
              type:  string
              value: (null)

        - name: ServerConnectData
          desc: サーバ接続データ
          properties:
            - name:  serverAddress
              desc:  接続先のサーバアドレス
              type:  string
              value: (null)
            - name:  serverPort
              desc:  接続先のサーバポート
              type:  int
              value: 7777
            - name:  serverToken
              desc:  接続用サーバトークン
              type:  string
              value: (null)

      consts:
        - name: MY_CONST
          desc: テスト定数
          definitions:
            - name:  MY_VALUE
              desc:  テスト定数の値
              type:  int
              value: 1

################################################################################
################################################################################
################################################################################
# コード生成テンプレート
templates:
  - generate: before
    eval: |
      # nodejs default values
      def nodejs_defval(p)
        case p["type"]
        when "bool"
          return "false" if not p.key?("value")
          return p["value"]
        when "int" || "float" || "double"
          return "0" if not p.key?("value")
          return p["value"]
        when "string"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "\"\""
          else
            return "\"#{p["value"]}\""
          end
        when "array"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "[]"
          end
        when "list"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "[]"
          end
        else
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "new #{p["type"]}()"
          end
        end
      end
      # cs default values
      def cs_defval(p)
        case p["type"]
        when "bool"
          return "false" if not p.key?("value")
          return p["value"]
        when "int"
          return "0" if not p.key?("value")
          return p["value"]
        when "float"
          return "0.0f" if not p.key?("value")
          return p["value"]
        when "double"
          return "0.0" if not p.key?("value")
          return p["value"]
        when "string"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "\"\""
          else
            return "\"#{p["value"]}\""
          end
        when "array"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "new #{cs_type_name(p["subtype"])}[0]"
          end
        when "list"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "new List<#{cs_type_name(p["subtype"])}>()"
          end
        else
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "new #{cs_type_name(p["type"])}()"
          end
        end
      end
      # cs type
      def cs_type(p)
        case p["type"]
        when "array"
          return "#{cs_type_name(p["subtype"])}[]"
        when "list"
          return "List<#{cs_type_name(p["subtype"])}>"
        else
          return cs_type_name(p["type"])
        end
      end
      # cs type name
      def cs_type_name(type)
        #case type
        #when "int", "float", "double", "string"
        #  return type
        #else
        #  return "Services.Protocols.Models." + type
        #end
        return type
      end

  # nodejs
  - generate: webapi
    in: /output/nodejs/services/protocols
    output: routes.js
    template: |
      exports = {}
      exports.setup = function(router, controller, group, logger) {
          var alwaysMiddlewares = (!controller.use)? null : controller.use("always");
          if (alwaysMiddlewares) {
              for (var i in alwaysMiddlewares) {
                  router.use(alwaysMiddlewares[i]);
              }
          }
          <%- entries.each do |entry| -%>
          <%- name     = entry["name"]      -%>
          <%- impl     = name + "_impl"     -%>
          <%- desc     = entry["desc"]      -%>
          <%- api_path = entry["api_path"]  -%>
          <%- use      = entry["use"] || [] -%>
          <%- group    = entry["group"]     -%>
          <%- request  = entry["request"]   -%>
          <%- if group.nil? -%>
          if (!group) {
          <%- else -%>
          if (group && group == "<%= group %>") {
          <%- end -%>
              logger.debug('routes.setup: binding controller method "<%= name %>" to route "<%= api_path %>".');
              // <%= name %>
              // <%= desc %>
              var <%= impl %> = controller.<%= name %>;
              if (<%= impl %>) {
                  do {
                      var routeMidlewares = null;
                      <%- use.each do |u| -%>
                      routeMiddlewares = (!controller.use)? null : controller.use("<%= u %>");
                      if (routeMiddlewares) {
                          for (var i in routeMiddlewares) {
                              router.use("<%= api_path %>", routeMidlewares[i]);
                          }
                      } else {
                          logger.error('routes.setup: controller has no middleware "<%= u %>" for route "<%= api_path %>".');
                          break;
                      }
                      <%- end -%>
                      router.post("<%= api_path %>", function(req, res) {
                          <%- request.each do |p| -%>
                          <%- if p.key?('validate') -%>
                          if (!controller.validate(req, '<%= p['name'] %>', <%= p['validate'].to_json %>)) {
                              res.status(400).send({err: new Error('bad request')});
                              return;
                          }
                          <%- end -%>
                          <%- end -%>
                          if (controller.call) {
                            controller.call(<%= impl %>, req, res);
                          } else {
                            <%= impl %>(req, res);
                          }
                      });
                  } while(false);
              } else {
                  logger.error('routes.setup: controller has no method "<%= name %>" for route "<%= api_path %>".');
              }
          }
          <%- end -%>
      }
      module.exports = exports;

  - generate: webapi
    in: /output/nodejs/services/protocols
    output: webapi.js
    template: |
      var webapiClient = require('./../library/webapi_client');
      var models       = require('./models');
      exports = {};
      <%- entries.each do |entry| -%>
      <%- name     = entry["name"].to_camel -%>
      <%- desc     = entry["desc"]          -%>
      <%- api_path = entry["api_path"]      -%>
      <%- request  = entry["request"]       -%>
      <%- response = entry["response"]      -%>
      <%- client   = entry["client"]        -%>
      // <%= name %>
      // <%= desc %>
      exports.<%= name %> = function(<% request.each do |p| %><%= p["name"] %>, <% end %>callback, queries = null, forms = null, headers = null) {
          var client = webapiClient.getClient(<% if !client.nil? %>"<%= client %>"<% end %>);
          var data = {};
          <%- request.each do |p| -%>
          data["<%= p["name"] %>"] = <%= p["name"] %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
          <%- end -%>
          return client.post("<%= api_path %>", data, function(err, responseData) {
              if (err) {
                  if (callback != null) {
                      callback(err, null);
                  }
                  return;
              }
              if (callback != null) {
                  callback(err, responseData);
              }
          }, queries, forms, headers);
      }
      <%- end -%>
      module.exports = exports;

  - generate: models
    in: /output/nodejs/services/protocols
    output: models.js
    template: |
      var util      = require('util');
      var ModelData = require('./../library/model_data');
      var consts    = require('./consts');
      var models    = {};
      <%- entries.each do |entry| -%>
      <%- name       = entry["name"].to_pascal -%>
      <%- desc       = entry["desc"]           -%>
      <%- properties = entry["properties"]     -%>
      // <%= name %>
      // <%= desc %>
      function <%= name %>() {
          this.init();
      }
      util.inherits(<%= name %>, ModelData);
      ModelData.setupType(<%= name %>, '<%= name %>', 'db_<%= name.to_snake %>');
      <%= name %>.prototype.init = function() {
          <%= name %>.super_.prototype.init.call(this);
      };
      <%= name %>.prototype.clear = function() {
          <%- properties.each do |p| -%>
          this.<%= p["name"] %> = <%= nodejs_defval(p) %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
          <%- end -%>
      }
      models.<%= name %> = <%= name %>;
      <%- end -%>
      module.exports = models;

  - generate: consts
    in: /output/nodejs/services/protocols
    output: consts.js
    template: |
      exports = {};
      <%- entries.each do |entry| -%>
      <%- name        = entry["name"]        -%>
      <%- desc        = entry["desc"]        -%>
      <%- definitions = entry["definitions"] -%>
      // <%= name %>
      // <%= desc %>
      exports.<%= name %> = {};
      <%- definitions.each do |d| -%>
      exports.<%= name %>.<%= d["name"] %> = <%= nodejs_defval(d) %>;<% if d.key?("desc") %> // <%= d["desc"] %><% end %>
      <%- end -%>
      <%- end -%>
      module.exports = exports;

  # cs
  - generate: webapi
    in: /output/cs/Services/Protocols
    output: WebAPI.cs
    template: |
      using System;
      using System.Collections;
      using System.Collections.Generic;
      using Services.Protocols.Models;
      using Services.Protocols.Consts;
      using UnityEngine;
      namespace Services.Protocols {
          public class WebAPI {
              <%- entries.each do |entry| -%>
              <%- name   = entry["name"].to_pascal -%>
              <%- desc   = entry["desc"]           -%>
              <%- client = entry["client"]         -%>
              <%- treq   = name + "Request"        -%>
              <%- tres   = name + "Response"       -%>
              [Serializable]
              public struct <%= treq %> {
                  <%- entry["request"].each do |p| -%>
                  public <%= cs_type(p) %> <%= p["name"] %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
                  <%- end -%>
              }

              [Serializable]
              public struct <%= tres %> {
                  <%- entry["response"].each do |p| -%>
                  public <%= cs_type(p) %> <%= p["name"] %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
                  <%- end -%>
              }

              // <%= name %>
              // <%= desc %>
              public static WebAPIClient.Request <%= name %>(<%
              %><%
                  %><% entry["request"].each do |p| %><%
                  %><%= p["type"]  %> <%= p["name"] -%>, <%
                  %><% end %><%
              %>Action<string,<%= tres %>> callback, string[] queries = null, string[] forms = null, string[] headers = null) {
                  var client = WebAPIClient.GetClient(<% if !client.nil? %>"<%= client %>"<% end %>);
                  var data = new <%= treq %>();
                  <%- entry["request"].each do |p| -%>
                  data.<%= p["name"] %> = <%= p["name"] %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
                  <%- end -%>
                  return client.Post<<%= treq %>,<%= tres %>>("<%= entry["api_path"] %>", data, callback, queries, forms, headers);
              }
              <%- end -%>
          }
      }

  - generate: models
    in: /output/cs/Services/Protocols
    output: Models.cs
    template: |
      using System;
      using System.Collections;
      using System.Collections.Generic;
      using Services.Protocols.Consts;
      using UnityEngine;
      namespace Services.Protocols.Models {
          <%- entries.each do |entry| -%>
          <%- name       = entry["name"].to_pascal -%>
          <%- desc       = entry["desc"]           -%>
          <%- properties = entry["properties"]     -%>
          // <%= name %>
          // <%= desc %>
          [Serializable]
          public class <%= name %> : ModelData {
              <%- properties.each do |p| -%>
              public <%= cs_type(p) %> <%= p["name"] %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
              <%- end -%>
              protected override void Clear() {
                  <%- properties.each do |p| -%>
                  <%= p["name"] %> = <%= cs_defval(p) %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
                  <%- end -%>
              }
          }
          <%- end -%>
      }

  - generate: consts
    in: /output/cs/Services/Protocols
    output: Consts.cs
    template: |
      using System;
      namespace Services.Protocols.Consts {
          <%- entries.each do |entry| -%>
          <%- name        = entry["name"]        -%>
          <%- desc        = entry["desc"]        -%>
          <%- definitions = entry["definitions"] -%>
          using System;
          using System.Collections;
          using System.Collections.Generic;
          using UnityEngine;
          // <%= name %>
          // <%= desc %>
          [Serializable]
          public class <%= name %> {
              <%- definitions.each do |d| -%>
              public static readonly <%= cs_type(d) %> <%= d["name"] %> = <%= cs_defval(d) %>;<% if d.key?("desc") %> // <%= d["desc"] %><% end %>
              <%- end -%>
          }
          <%- end -%>
      }

