# var   webapi = require('./services/protocols/webapi');
# using WebAPI = Services.Protocols.WebAPI;
specs:
  services:
    protocols:
      webapi:
        - name: Test
          desc: テストインターフェイス
          api_path: /test
          request:
            - name: reqValue
              desc: リクエストの値
              type: int
          response:
            - name: resValue
              desc: レスポンスの値
              type: int

      models:
        - name: User
          desc: ユーザ情報
          properties:
            - name:  uuid
              desc:  ユーザのUUID型
              type:  string
              value: (null)

        - name: SampleModel
          desc: テストモデル
          properties:
            - name:    intValue
              desc:    整数型
              type:    int
              value:   100
            - name:    stringValue1
              desc:    文字列型
              type:    string
              value:   "test"
            - name:    stringValue2
              desc:    文字列型 (null)
              type:    string
              value:   (null)
            - name:    stringValue3
              desc:    文字列型 (空)
              type:    string
              value:   (empty)
            - name:    objectValue1
              desc:    型 (null)
              type:    SampleModel
              value:   (null)
            - name:    objectValue2
              desc:    型 (空)
              type:    User
              value:   (empty)
            - name:    arrayValue1
              desc:    配列型 (null)
              type:    array
              subtype: User
              value:   (null)
            - name:    arrayValue2
              desc:    配列型 (空)
              type:    array
              subtype: User
              value:   (empty)
            - name:    listValue1
              desc:    リスト型 (null)
              type:    list
              subtype: User
              value:   (null)
            - name:    listValue2
              desc:    リスト型 (空)
              type:    list
              subtype: User
              value:   (empty)

      consts:
        - name: MY_CONST
          desc: テスト定数
          definitions:
            - name:  MY_VALUE
              desc:  テスト定数の値
              type:  int
              value: 1

################################################################################
################################################################################
################################################################################
# コード生成テンプレート
templates:
  - generate: before
    eval: |
      # nodejs default values
      def nodejs_defval(p)
        case p["type"]
        when "int" || "float" || "double"
          return "0" if not p.key?("value")
          return p["value"]
        when "string"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "\"\""
          else
            return "\"#{p["value"]}\""
          end
        when "array"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "[]"
          end
        when "list"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "[]"
          end
        else
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "models.#{p["type"]}()"
          end
        end
      end
      # cs default values
      def cs_defval(p)
        case p["type"]
        when "int"
          return "0" if not p.key?("value")
          return p["value"]
        when "float"
          return "0.0f" if not p.key?("value")
          return p["value"]
        when "double"
          return "0.0" if not p.key?("value")
          return p["value"]
        when "string"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "\"\""
          else
            return "\"#{p["value"]}\""
          end
        when "array"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "new #{p["subtype"]}[0]"
          end
        when "list"
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "new List<#{p["subtype"]}>()"
          end
        else
          return "null" if not p.key?("value")
          case p["value"]
          when "(null)"
            return "null"
          when "(empty)"
            return "new #{p["type"]}()"
          end
        end
      end
      # cs types
      def cs_type(p)
        case p["type"]
        when "int" || "float" || "double" || "string"
          return p["type"]
        when "array"
          return "#{p["subtype"]}[]"
        when "list"
          return "List<#{p["subtype"]}>"
        else
          return p["type"]
        end
      end

  # nodejs
  - generate: webapi
    in: /output/nodejs/services/protocols
    output: routes.js
    template: |
      exports = {}
      exports.setup = function(router, binder, client, logger) {
          <%- entries.each do |entry| -%>
          <%- name     = entry["name"]       -%>
          <%- impl     = name + "_impl"      -%>
          <%- desc     = entry["desc"]       -%>
          <%- api_path = entry["api_path"]   -%>
          <%- auth     = entry["auth"] || [] -%>
          <%- client   = entry["client"]     -%>
          <%- if client.nil? -%>
          if (!client) {
          <%- else -%>
          if (client && client == "<%= client %>") {
          <%- end -%>
              logger.debug('routes.setup: binding "<%= name %>" for route "<%= api_path %>".');
              // <%= name %>
              // <%= desc %>
              var <%= impl %> = binder.<%= name %>;
              if (!<%= impl %>) {
                  logger.error('routes.setup: binder has no implement "<%= name %>" for route "<%= api_path %>".');
                  return;
              }
              <%- auth.each do |a| -%>
              if (!binder["<%= a %>"]) {
                  logger.error('routes.setup: binder has no auth middleware "<%= a %>" for route "<%= api_path %>".');
                  return;
              }
              router.use("<%= api_path %>", binder["<%= a.to_camel %>"]);
              <%- end -%>
              router.post("<%= api_path %>", function(req, res) {
                  <%= impl %>(req, res);
              });
          }
          <%- end -%>
      }
      module.exports = exports;

  - generate: webapi
    in: /output/nodejs/services/protocols
    output: webapi.js
    template: |
      var webapiClient = require('./../library/webapi_client');
      var models       = require('./models');
      exports = {};
      <%- entries.each do |entry| -%>
      <%- name     = entry["name"].to_camel -%>
      <%- desc     = entry["desc"]          -%>
      <%- api_path = entry["api_path"]      -%>
      <%- request  = entry["request"]       -%>
      <%- response = entry["response"]      -%>
      <%- client   = entry["client"]        -%>
      // <%= name %>
      // <%= desc %>
      exports.<%= name %> = function(<% request.each do |p| %><%= p["name"] %>, <% end %>callback, queries = null, forms = null, headers = null) {
          var client = webapiClient.getClient(<% if !client.nil? %>"<%= client %>"<% end %>);
          var data = {};
          <%- request.each do |p| -%>
          data["<%= p["name"] %>"] = <%= p["name"] %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
          <%- end -%>
          return client.post("<%= api_path %>", data, function(err, responseData) {
              if (err) {
                  if (callback != null) {
                      callback(err, null);
                  }
                  return;
              }
              if (callback != null) {
                  callback(err, responseData);
              }
          }, queries, forms, headers);
      }
      <%- end -%>
      module.exports = exports;

  - generate: models
    in: /output/nodejs/services/protocols
    output: models.js
    template: |
      var consts = require('./consts');
      exports = {};
      var models = exports;
      <%- entries.each do |entry| -%>
      <%- name       = entry["name"].to_pascal -%>
      <%- desc       = entry["desc"]           -%>
      <%- properties = entry["properties"]     -%>
      // <%= name %>
      // <%= desc %>
      exports.<%= name %> = function() {
          var model = {};
          <%- properties.each do |p| -%>
          model.<%= p["name"] %> = <%= nodejs_defval(p) %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
          <%- end -%>
          return model;
      }
      <%- end -%>
      module.exports = exports;

  - generate: consts
    in: /output/nodejs/services/protocols
    output: consts.js
    template: |
      exports = {};
      <%- entries.each do |entry| -%>
      <%- name        = entry["name"]        -%>
      <%- desc        = entry["desc"]        -%>
      <%- definitions = entry["definitions"] -%>
      // <%= name %>
      // <%= desc %>
      exports.<%= name %> = {};
      <%- definitions.each do |d| -%>
      exports.<%= name %>.<%= d["name"] %> = <%= nodejs_defval(d) %>;<% if d.key?("desc") %> // <%= d["desc"] %><% end %>
      <%- end -%>
      <%- end -%>
      module.exports = exports;

  # cs
  - generate: webapi
    in: /output/cs/Services/Protocols
    output: WebAPI.cs
    template: |
      using System;
      using Services.Protocols.Models;
      namespace Services.Protocols {
          public class WebAPI {
              <%- entries.each do |entry| -%>
              <%- name   = entry["name"].to_pascal -%>
              <%- desc   = entry["desc"]           -%>
              <%- client = entry["client"]         -%>
              <%- treq   = name + "_Request"       -%>
              <%- tres   = name + "_Response"      -%>
              [Serializable]
              public struct <%= treq %> {
                  <%- entry["request"].each do |p| -%>
                  public <%= cs_type(p) %> <%= p["name"] %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
                  <%- end -%>
              }

              [Serializable]
              public struct <%= tres %> {
                  <%- entry["response"].each do |p| -%>
                  public <%= cs_type(p) %> <%= p["name"] %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
                  <%- end -%>
              }

              // <%= name %>
              // <%= desc %>
              public static WebAPIClient.Request <%= name %>(<%
              %><%
                  %><% entry["request"].each do |p| %><%
                  %><%= p["type"]  %> <%= p["name"] -%>, <%
                  %><% end %><%
              %>Action<string,<%= tres %>> callback, string[] queries = null, string[] forms = null, string[] headers = null) {
                  var client = WebAPIClient.GetClient(<% if !client.nil? %>"<%= client %>"<% end %>);
                  var data = new <%= treq %>();
                  <%- entry["request"].each do |p| -%>
                  data.<%= p["name"] %> = <%= p["name"] %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
                  <%- end -%>
                  return client.Post<<%= treq %>,<%= tres %>>("<%= entry["api_path"] %>", data, callback, queries, forms, headers);
              }
              <%- end -%>
          }
      }

  - generate: models
    in: /output/cs/Services/Protocols
    output: Models.cs
    template: |
      using System;
      using Services.Protocols.Consts;
      namespace Services.Protocols.Models {
          <%- entries.each do |entry| -%>
          <%- name       = entry["name"].to_pascal -%>
          <%- desc       = entry["desc"]           -%>
          <%- properties = entry["properties"]     -%>
          // <%= name %>
          // <%= desc %>
          [Serializable]
          public class <%= name %> {
              <%- properties.each do |p| -%>
              public <%= cs_type(p) %> <%= p["name"] %> = <%= cs_defval(p) %>;<% if p.key?("desc") %> // <%= p["desc"] %><% end %>
              <%- end -%>
          }
          <%- end -%>
      }

  - generate: consts
    in: /output/cs/Services/Protocols
    output: Consts.cs
    template: |
      using System;
      namespace Services.Protocols.Consts {
          <%- entries.each do |entry| -%>
          <%- name        = entry["name"]        -%>
          <%- desc        = entry["desc"]        -%>
          <%- definitions = entry["definitions"] -%>
          // <%= name %>
          // <%= desc %>
          [Serializable]
          public class <%= name %> {
              <%- definitions.each do |d| -%>
              public static readonly <%= cs_type(d) %> <%= d["name"] %> = <%= cs_defval(d) %>;<% if d.key?("desc") %> // <%= d["desc"] %><% end %>
              <%- end -%>
          }
          <%- end -%>
      }
