# var   webapi = require('./services/protocols/webapi');
# using WebAPI = Services.Protocols.WebAPI;
services:
  protocols:
    webapi:
      - name: Test
        desc: テストインターフェイス
        api_path: /test
        request:
          - name: value
            type: int
        response:
          - name: value
            type: int

    models:
      - name: MyModel
        desc: テストモデル
        properties:
          - name: value
            type: int

      - name: User
        desc: ユーザ情報
        properties:
          - name: value
            type: int

    enums:
      - name: MyEnum
        desc: テスト列挙
        definitions:
          - name: Foo
            value: 0
          - name: Bar
          - name: Qux

    consts:
      - name: MY_CONST
        desc: テスト定数
        definitions:
          - name: MY_VALUE
            type: int
            value: 1

################################################################################
################################################################################
################################################################################
# コード生成テンプレート
templates:
  # nodejs
  - generate: webapi
    in: /output/nodejs/api/protocols
    output: <%= spec_name.to_snake %>/routes.js
    template: |
      exports = {}
      exports.setup = function(router, connector) {
          <% entries.each do |entry| %>
          // <%= entry["name"] %>
          // <%= entry["description"] %>
          var impl_<%= entry["name"] %> = connector.<%= entry["name"] %>;
          if (!impl_<%= entry["name"] %>) {
              throw new Error('connector has no implement "<%= entry["name"] %>" for route "<%= entry["api_path"] %>".');
          }
          router.post("<%= entry["api_path"] %>", function(req, res) {
              var req_data = req.body;
              var res_data = impl_<%= entry["name"] %>(req_data);
              res.json(res_data);
          });
          <% end %>
      }
      module.exports = exports;

  - generate: webapi
    in: /output/nodejs/*/protocols
    output: <%= spec_name.to_snake %>/<%= generate_name.to_snake %>.js
    template: |
      var client = require('services_library').WebAPIClient.getClient();
      exports = {};
      <% entries.each do |entry| %>
      // <%= entry["name"] %>
      // <%= entry["description"] %>
      exports.<%= entry["name"].to_camel %> = function(<%-
      -%><%- entry["request"].each do |param| -%><%-
      -%><%= param["name"] -%>, <%-
      -%><% end %>callback) {
          var req_data = {};
          <%- entry["request"].each do |param| -%>
          req_data["<%= param["name"] %>"] = <%= param["name"] %>;
          <%- end -%>
          return client.post("<%= entry["api_path"] %>", req_data, function(err, res_data) {
              if (err) {
                  if (callback != null) {
                      callback(err, null);
                  }
                  return;
              }
              if (callback != null) {
                  callback(<%- entry["response"].each_with_index do |param,i| -%><%-
                  -%>res_data["<%= param["name"] -%>"]<%- if (i < entry["response"].size - 1) -%>, <%- end -%><%-
                  -%><% end %>);
              }
          });
      }
      <% end %>
      module.exports = exports;

  # cs
  - generate: webapi
    in: /output/cs/*/Protocols
    output: <%= spec_name.to_pascal %>/<%= generate_name.to_pascal %>.cs
    template: |
      using System;
      namespace Services.Protocols.<%= spec_name.to_pascal %> {
          public class <%= generate_name.to_pascal %> {
              <% entries.each do |entry| %>
              // <%= entry["name"] %>
              // <%= entry["description"] %>
              public static <%= entry["name"].to_pascal %>() {
              }
              <% end %>
          }
      }

#  - generate: before
#    eval: |
#      def test
#        "test"
#      end
#  - generate: after
#    in: /output/nodejs/*/protocols
#    output: index.js
#    template: |
#      // index
#      // <%= $hoge %>
#     // auto generated by protocols.
#     module.exports = {};
#     <% models.each do |t| %>
#     // <%= t["title"] %>
#     module.exports.<%= t["name"] %> = function() {
#       return {
#       <%- t["properties"].each do |p| -%>
#       <%- case p["type"]
#            when "string" -%>
#           <%= p["name"] %>: <%= (p.key?("def"))? "\"#{p["def"]}\"" : "null" %>,
#       <%- when "integer" -%>
#           <%= p["name"] %>: <%= (p.key?("def"))? "#{p["def"]}" : 0 %>,
#       <%- when "boolean" -%>
#           <%= p["name"] %>: <%= (p.key?("def"))? "#{p["def"]}" : false %>,
#       <%- when "list" -%>
#           <%= p["name"] %>: [],
#       <%- end -%>
#       <%- end -%>
#       };
#     }
#     <% end %>
#  # cmd.js
#  - projects_path: /generate/nodejs
#    generate_path: protocols/cmd.js
#    template: |
#      // auto generated by protocols.
#      module.exports = {};
#      module.exports.API = {};
#      module.exports.API.MATCHING_REQUEST  = 1;
#      module.exports.API.MATCHING_RESPONSE = 2;
#
#  # index.js
#  - projects_path: /generate/nodejs
#    generate_path: protocols/index.js
#    template: |
#      // auto generated by protocols.
#      module.exports.Models = require('./models.js');
#      module.exports.CMD    = require('./cmd.js');
#
#  # Models.cs
#  - projects_path: /generate/cs
#    generate_path: Protocols/Models.cs
#    template: |
#      // auto generated by protocols.
#      namespace Protocols.Models {
#          // TODO
#      }
#
#  # CMD.cs
#  - projects_path: /generate/cs
#    generate_path: Protocols/CMD.cs
#    template: |
#      // auto generated by protocols.
#      namespace Protocols.CMD {
#          // TODO
#      }
#
