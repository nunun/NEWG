version: '3.4'
services:
  client:
    environment:
      - FQDN=${ENV_FQDN}
    ports:
      - 80:80
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  # TODO
  # host network mode
  server:
    environment:
      - FQDN=${ENV_FQDN}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  matching:
    environment:
      - FQDN=${ENV_FQDN}
    ports:
      - 7755:7755
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  api:
    environment:
      - FQDN=${ENV_FQDN}
    ports:
      - 7780:7780
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  mindlink:
    environment:
      - DEBUG_HTTP_CHANNEL_ENABLE=1
    ports:
      - 127.0.0.1:17766:17766
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  rabbitmq:
    volumes:
      - redis_data:/opt/couchdb/data/mnesia
    ports:
      - 127.0.0.1:15672:15672
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  couchdb:
    volumes:
      - redis_data:/opt/couchdb/data
    ports:
      - 127.0.0.1:15984:5984
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  redis:
    volumes:
      - redis_data:/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  sense:
    environment:
      - DEST=http://api:7780
    ports:
      - 127.0.0.1:17780:80
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  portainer:
    command: --no-auth
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 127.0.0.1:19000:9000
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

volumes:
  rabbitmq_data:
  couchdb_data:
  redis_data:
  portainer_data:

